<?php
/**
 * @file
 * General hooks.
 */

const ISLANDORA_SIMPLE_MAP_KML_DATASTREAM_DEFAULT_MIMETYPE = 'application/vnd.google-earth.kml+xml';

/**
 * Implements hook_menu().
 */
function islandora_simple_map_kml_menu() {
  $items = array();
  $items['admin/islandora/tools/islandora_simple_map/kml'] = array(
    'title' => 'KML',
    'description' => 'Configure the KML settings.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_simple_map_kml_admin_settings_form'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/admin_form.inc',
    'weight' => 10,
  );

  return $items;
}

/**
 * Helper to invoke hooks to gather KML info for a given object.
 *
 * @param AbstractObject $object
 *   The object for which to gather KML.
 *
 * @return array
 *   An array of KML info.
 */
function islandora_simple_map_kml_get_kml(AbstractObject $object) {
  $kml = array();

  // Since KML is Google Maps-specific, check the map type being used.
  if (variable_get('islandora_simple_map_map_type', ISLANDORA_SIMPLE_MAP_GOOGLE_MAPS) === ISLANDORA_SIMPLE_MAP_GOOGLE_MAPS) {
    $kml = module_invoke_all('islandora_simple_map_kml_get_kml', $object);
    drupal_alter('islandora_simple_map_kml_get_kml', $kml, $object);
  }
  return $kml;
}

/**
 * Implements hook_islandora_simple_map_kml_get_kml().
 */
function islandora_simple_map_kml_islandora_simple_map_kml_get_kml(AbstractObject $object) {
  $_split_parse = function ($to_parse) {
    return drupal_map_assoc(array_filter(array_map('trim', explode("\r\n", $to_parse))));
  };
  $models = $_split_parse(variable_get('islandora_simple_map_kml_models', ''));
  if ($models && !array_intersect($object->models, $models)) {
    return;
  }
  $mimetypes = $_split_parse(variable_get('islandora_simple_map_kml_mimetypes', ISLANDORA_SIMPLE_MAP_KML_DATASTREAM_DEFAULT_MIMETYPE));
  $dsids = $_split_parse(variable_get('islandora_simple_map_kml_dsids', ''));

  $candidates = iterator_to_array($object);
  if ($dsids) {
    $candidates = array_intersect_key($candidates, $dsids);
  }
  $map_to_mime = function (AbstractDatastream $datastream) {
    return $datastream->mimetype;
  };
  $candidates = array_intersect(array_map($map_to_mime, $candidates), $mimetypes);

  $to_return = array();
  foreach (array_keys($candidates) as $dsid) {
    $to_return[] = url("islandora/object/{$object->id}/datastream/$dsid/view", array(
      'absolute' => TRUE,
    ));
  }
  return $to_return;
}
