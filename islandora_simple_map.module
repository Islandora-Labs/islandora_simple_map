<?php

/**
 * @file
 * The main Islandora Simple Map module file.
 */

define('ISLANDORA_SIMPLE_MAP_XPATHS', "//mods:subject/mods:cartographics/mods:coordinates\n//mods:subject/mods:geographic");

/**
 * Implements hook_menu().
 */
function islandora_simple_map_menu() {
  $items = array();
  $items['admin/islandora/tools/islandora_simple_map'] = array(
    'title' => 'Islandora Simple Map',
    'description' => 'Configure the Islandora Simple Map module.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_simple_map_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin settings form builder.
 */
function islandora_simple_map_admin_settings() {
  $form = array();
  $form['islandora_simple_map_xpath'] = array(
    '#title' => t('XPath expressions to MODS elements containing map data'),
    '#type' => 'textarea',
    '#default_value' => variable_get('islandora_simple_map_xpath', ISLANDORA_SIMPLE_MAP_XPATHS),
    '#description' => t("Enter one XPath expression per line, in preferred order with the most preferred first. The first data found in the object's MODS datastream by this list of XPath expressions will be used to populate the map."),
  );
  $form['islandora_simple_map_collapsed'] = array(
    '#type' => 'select',
    '#title' => t('Collapse map by default?'),
    '#default_value' => variable_get('islandora_simple_map_collapsed', 'collapsed'),
    '#options' => array(
      'collapsed' => t('Collapsed'),
      '' => t('Expanded'),
    ),
    '#description' => t('Whether or not the fieldset containing the map should be collapsed by default. The user can toggle the collapse.'),
  );
  $form['islandora_simple_map_iframe_width'] = array(
    '#title' => t('Map iframe width'),
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => variable_get('islandora_simple_map_iframe_width', '600'),
    '#description' => t('The width, in pixels, of the iframe the map will appear in.'),
  );
  $form['islandora_simple_map_iframe_height'] = array(
    '#title' => t('Map iframe height'),
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => variable_get('islandora_simple_map_iframe_height', '600'),
    '#description' => t('The height, in pixels, of the iframe the map will appear in.'),
  );
  $form['islandora_simple_map_zoom'] = array(
    '#title' => t('Default zoom level'),
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => variable_get('islandora_simple_map_zoom', '10'),
    '#description' => t('The higher the number, the higher the zoom.'),
  );
  $form['islandora_simple_map_attempt_cleanup'] = array(
    '#type' => 'checkbox',
    '#title' => t('Attempt to clean up map data.'),
    '#default_value' => variable_get('islandora_simple_map_attempt_cleanup', 1),
    '#description' => t('Check this option if you want to clean up data before passing it off to Google Maps. Please consult the README file for more information'),
  );
  $form['islandora_simple_map_use_google_maps_javascript_api'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the Google Maps JavaScript API.'),
    '#default_value' => variable_get('islandora_simple_map_use_google_maps_javascript_api', 0),
  );
  $form['islandora_simple_map_google_api_key'] = array(
    '#title' => t('Google API Key'),
    '#type' => 'textfield',
    '#default_value' => variable_get('islandora_simple_map_google_api_key', ''),
    '#description' => t('The Google API key to use for this site. You need a Google API key only if you are using the Maps JavaScript API.'),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_theme().
 */
function islandora_simple_map_theme() {
  return array(
    'islandora_simple_map' => array(
      'variables' => array(
        'coords' => NULL,
        'iframe_width' => NULL,
        'iframe_height' => NULL,
        'zoom' => NULL,
        'collapsed' => NULL,
      ),
      'path' => drupal_get_path('module', 'islandora_simple_map') . '/theme',
      'template' => 'islandora_simple_map',
    ),
    'islandora_simple_map_google_maps_js_api' => array(
      'variables' => array(
        'coords' => NULL,
        'zoom' => NULL,
        'collapsed' => NULL,
      ),
      'path' => drupal_get_path('module', 'islandora_simple_map') . '/theme',
      'template' => 'islandora_simple_map_google_maps_js_api',
    ),
  );
}

/**
 * Implements hook_islandora_view_object_alter().
 */
function islandora_simple_map_islandora_view_object_alter(&$object, &$rendered) {
  $xpaths = preg_split('/$\R?^/m', trim(variable_get('islandora_simple_map_xpath', ISLANDORA_SIMPLE_MAP_XPATHS)));
  $found_coords = array();

  if (isset($object['MODS'])) {
    $mods_string = $object['MODS']->content;
    $mods_doc = new DOMDocument();
    $mods_doc->loadXML($mods_string);
    if ($mods_doc) {
      foreach ($xpaths as $xpath) {
        $xpath = trim($xpath);
        if (strlen($xpath)) {
          $mods_xpath = new DOMXPath($mods_doc);
          $mods_xpath->registerNamespace('mods', "http://www.loc.gov/mods/v3");
          $mods_carto_xpath = $mods_xpath->query($xpath);
          if ($mods_carto_xpath->length) {
            // Take the first element found by the current XPath.
            $mods_carto = $mods_carto_xpath->item(0);
            $node_value = $mods_carto->nodeValue;
            if (variable_get('islandora_simple_map_attempt_cleanup', 1)) {
              $node_value = islandora_simple_map_clean_coordinates($node_value);
            }
            if (strlen($node_value)) {
              $found_coords[] = $node_value;
            }
          }
        }
      }
    }

    $google_maps_js_api = variable_get('islandora_simple_map_use_google_maps_javascript_api', '0');
    $key = variable_get('islandora_simple_map_google_api_key', '');

    // Append the map iframe if the Google Maps JavaScript API is not being used.
    if (!$google_maps_js_api && isset($rendered[NULL]) && count($found_coords)) {
      $width = variable_get('islandora_simple_map_iframe_width', '600');
      $height = variable_get('islandora_simple_map_iframe_height', '600');
      $zoom = variable_get('islandora_simple_map_zoom', '10');
      $collapsed = variable_get('islandora_simple_map_collapsed', 'collapsed');
      $markup = theme('islandora_simple_map', array(
        // We use the first set of coords if our XPaths found more than one.
        'coords' => urlencode($found_coords[0]),
        'iframe_width' => $width,
        'iframe_height' => $height,
        'zoom' => $zoom,
        'collapsed' => $collapsed,
      ));
      $rendered[NULL]['#markup'] = $rendered[NULL]['#markup'] . $markup;
    }

    // Use the Google Maps JavaScript API.
    if ($google_maps_js_api && strlen($key) && isset($rendered[NULL]) && count($found_coords)) {
      drupal_add_css('html, body, #map-canvas-wrapper {height: 100%; margin: 0; padding: 0;} #map-canvas {height: 100%;}', array('type' => 'inline'));
      $zoom = variable_get('islandora_simple_map_zoom', '10');
      $collapsed = variable_get('islandora_simple_map_collapsed', 'collapsed');
      $markup = theme('islandora_simple_map_google_maps_js_api', array(
        'zoom' => $zoom,
        'collapsed' => $collapsed,
      ));
      $rendered[NULL]['#markup'] = $rendered[NULL]['#markup'] . $markup;
    }

  }
}

/**
 * Applies some cleanup on data to make it more reliable for Google Maps.
 *
 * @param string $data
 *    The coordinate data.
 *
 * @return string
 *   The cleaned up data.
 */
function islandora_simple_map_clean_coordinates($data) {
  $data = preg_replace('/;/', ',', $data);
  return $data;
}

/**
 * Implements hook_page_build().
 *
 * We can't use drupal_add_js() here because it does not yet support adding the
 * 'async' attribute to the src element (see https://www.drupal.org/node/1664602).
 * Once this issue is resolved for D7 we should implement drupal_add_js().
 */
function islandora_simple_map_page_build(&$page) {
  $google_maps_js_api = variable_get('islandora_simple_map_use_google_maps_javascript_api', '0');
  $key = variable_get('islandora_simple_map_google_api_key', '');
  // Any good way to not include this for every page?
  if ($google_maps_js_api && strlen($key)) {
    $js = <<<EOT
    function initMap() {
        var myLatLng = {lat: -25.363, lng: 131.044};
        var map = new google.maps.Map(document.getElementById('map-canvas'), {
          zoom: 4,
          center: myLatLng
        });
        var marker = new google.maps.Marker({
          position: myLatLng,
          map: map,
          title: 'Hello World!'
        });
      }
EOT;
    drupal_add_js($js, array('type' => 'inline', 'scope' => 'header'));
    $js_url = 'https://maps.googleapis.com/maps/api/js?key=' . $key . '&callback=initMap';
    $page['content']['#sorted'] = FALSE;
    $page['page_bottom'] = array(
      '#markup' => '<script async defer src="' . $js_url . '"></script>',
      '#weight' => 50,
    );
  }
}
